(()=>{"use strict";var e={802:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.IRunConfigCommandType=void 0,function(e){e.RemoveRuleByName="RemoveRuleByName",e.RemoveEmptyBlocks="RemoveEmptyBlocks",e.RemoveEmptyComments="RemoveEmptyComments",e.ChangeOneLineCommentsToMultiline="ChangeOneLineCommentsToMultiline",e.RemoveCssVar="RemoveCssVar",e.CommentsContentTrim="CommentsContentTrim"}(n||(t.IRunConfigCommandType=n={}))},169:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IScssElementType=void 0,t.IScssElementType={default:"Default",rule:"Rule",block:"Block",oneLineComment:"OneLineComment",multiLineComment:"MultiLineComment",code:"Code"}},884:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tryRunCommandsOnComment=o,t.runCommand=c;const l=n(802),i=n(169),s=n(168);function o(e,t){let n=e,l=s.Functions.scssConvertToObject(n),i=s.Functions.objectConvertToScss(l);if(!s.Functions.compareScssStrings(n,i))return n;let o=JSON.parse(JSON.stringify(t));return o.runCommandOnContentOfComment=!1,c(l,o),s.Functions.objectConvertToScss(l)}function c(e,t){switch(t.commandType){case l.IRunConfigCommandType.RemoveCssVar:{let t=[e];for(;t.length>0;){let e=t.pop();if(null!=e.child&&null!=e.child)for(let n=e.child.length-1;n>=0;n--)if(e.child[n].elementType==i.IScssElementType.rule){let t=e.child[n];null!=t.value&&null!=t&&t.name.startsWith("--")&&e.child.splice(n,1)}else t.push(e.child[n])}}break;case l.IRunConfigCommandType.CommentsContentTrim:{let t=[e];for(;t.length>0;){let e=t.pop();if(null!=e.child&&null!=e.child)for(let n=e.child.length-1;n>=0;n--)e.child[n].elementType==i.IScssElementType.oneLineComment||e.child[n].elementType==i.IScssElementType.multiLineComment?e.child[n].text=e.child[n].text.trim():t.push(e.child[n])}}break;case l.IRunConfigCommandType.ChangeOneLineCommentsToMultiline:{let t=[e];for(;t.length>0;){let e=t.pop();if(null!=e.child&&null!=e.child){let n="",l=-1,s=-1;for(let t=e.child.length-1;t>=0;t--)if(e.child[t].elementType===i.IScssElementType.oneLineComment)-1==l?l=t:s=t,n=e.child[t].text+"\n"+n;else{if(-1!=s&&-1!=l){let t={elementType:i.IScssElementType.multiLineComment,text:n};e.child.splice(s,l-s,t)}s=-1,l=-1,n=""}if(-1!=s&&-1!=l){let t={elementType:i.IScssElementType.multiLineComment,text:n};e.child.splice(s,l-s,t)}for(let n=e.child.length-1;n>=0;n--)switch(e.child[n].elementType){case i.IScssElementType.oneLineComment:case i.IScssElementType.multiLineComment:break;default:t.push(e.child[n])}}}}break;case l.IRunConfigCommandType.RemoveEmptyComments:{let t=[e];for(;t.length>0;){let e=t.pop();if(null!=e.child)for(let n=e.child.length-1;n>=0;n--)e.child[n].elementType==i.IScssElementType.oneLineComment||e.child[n].elementType==i.IScssElementType.multiLineComment?""==e.child[n].text.trim()&&e.child.splice(n,1):t.push(e.child[n])}}break;case l.IRunConfigCommandType.RemoveRuleByName:{let n=[e];for(;n.length>0;){let e=n.pop();if(null!=e.child)for(let l=e.child.length-1;l>=0;l--)e.child[l].elementType==i.IScssElementType.rule?t.ruleName.includes(e.child[l].name.trim())&&e.child.splice(l,1):n.push(e.child[l])}}break;case l.IRunConfigCommandType.RemoveEmptyBlocks:{let n=0,l=0,s=!1;null!=t.blockWithOnlyCommentsTreatAsEmpty&&null!=t.blockWithOnlyCommentsTreatAsEmpty&&(s=t.blockWithOnlyCommentsTreatAsEmpty);do{n++,l=0;let t=[e];for(;t.length>0;){let e=t.pop();if(null!=e.child)for(let n=e.child.length-1;n>=0;n--){let o=e.child[n];if(o.elementType==i.IScssElementType.block)if(null==o.child)e.child.splice(n,1),l++;else{let c=o.child.map((e=>e.elementType)).filter((e=>e==i.IScssElementType.multiLineComment||e==i.IScssElementType.oneLineComment)).length;o.child.length<=0||c==o.child.length&&s?(e.child.splice(n,1),l++):t.push(e.child[n])}else t.push(e.child[n])}}}while(l>0)}{let n=!1;if(null!=t.blockWithOnlyCommentsTreatAsEmpty&&null!=t.blockWithOnlyCommentsTreatAsEmpty&&(n=t.blockWithOnlyCommentsTreatAsEmpty),n&&null!=e.child&&null!=e.child&&e.child.map((e=>e.elementType)).map((e=>e==i.IScssElementType.multiLineComment||e==i.IScssElementType.oneLineComment)).reduce(((e,t)=>e&&t),!0)&&e.child.length>0)for(;e.child.length>0;)e.child.pop()}break;default:console.log(`Command ${t.commandType} not implemented`)}if(t.runCommandOnContentOfComment){let n=[e];for(;n.length>0;){let e=n.pop();switch(e.elementType){case i.IScssElementType.multiLineComment:case i.IScssElementType.oneLineComment:let n=e.text;n=o(n,t),e.text=n}null!=e.child&&null!=e.child&&e.child.forEach((e=>n.push(e)))}}}},22:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debug=t.Debug=void 0;const l=n(928),i=n(152);class s{constructor(){this._debugOutputDir=process.cwd(),this._debugEnabled=!1}set DebugOutputDir(e){this._debugOutputDir=e,this.CleanDebugDir()}get DebugOutputDir(){return this._debugOutputDir}DebugEnable(){this._debugEnabled=!0}CleanDebugDir(){i.utility.getFilesSync(this.DebugOutputDir).forEach((e=>{e.endsWith(".debug.json")&&i.utility.deleteFileSync((0,l.join)(this.DebugOutputDir,e),!0)}))}GetDebugOutPath(e){return(0,l.join)(this.DebugOutputDir,e)}SaveObjectAsJsonFile(e,t){this._debugEnabled&&i.utility.saveObjectAsJson(this.GetDebugOutPath(e+".debug.json"),t)}}t.Debug=s,t.debug=new s},168:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Functions=void 0;const l=n(22),i=n(169),s=n(152);class o{static findDifference(e,t){const n=Math.max(e.length,t.length),l=new Map;for(let i=0;i<n;i++){let n=" ",s=" ";i<e.length&&(n=e[i]),i<t.length&&(s=t[i]);let o=`${n}${s}`;if(n!=s){let e=l.get(o);null==e||null==e?e=1:e++,l.set(o,e)}}return l}static countCharacters(e,t){let n=0;for(let l of t)l==e&&n++;return n}static countCharactersMap(e,t){let n=new Map;for(let t of e)n.set(t,0);for(let l of t)if(e.includes(l)){let e=1+n.get(l);n.set(l,e)}return n}static compareScssFiles(e,t){let n=s.utility.loadFileText(e),l=s.utility.loadFileText(t);return o.compareScssStrings(n,l)}static probablySameScssStrings(e,t){const n=function(e){return e.split("\n").filter((e=>!e.trimStart().startsWith("//"))).join("\n").replace(/\s+/g,"")};let l=n(e),i=n(t),s=(l.length,i.length,["{","}",";"]),c=o.countCharactersMap(s,l),r=o.countCharactersMap(s,i),u=new Map,m=!1;for(let e of s){let t=c.get(e)-r.get(e);0!=t&&u.set(e,t)}if(u.size<=0)m=!0;else if(1==u.size){let e=[...u.keys()][0];";"==e?m=this.compareScssStrings(l.replace(/;/g,""),i.replace(/;/g,"")):(this.findDifference(l,i),console.log({sumKey:e,sumKeyCount:u.get(e)}))}else this.findDifference(l,i),console.log(u);return m}static compareScssStrings(e,t){return e.replace(/\s+/g,"")==t.replace(/\s+/g,"")}static scssConvertToObject(e){let t={content:e,child:[],elementType:i.IScssElementType.default},n=0;const o=function(e){if(null==e.content||null==e.content)return;e.child=[];let t=e.content;const o="IN_BLOCK",c="IN_ONELINECOMMENT",r="IN_MULTILINECOMMENT",u="IN_RULE",m="IN_NAME_RULE_OR_BLOCK",p="IN_INTERNAL_BLOCK",a="IN_INTERNAL_BLOCK_MULTILINECOMMENT";let h=[];h.push("OUT");let d="",y="",g="",f="",T={name:"",child:[],elementType:i.IScssElementType.block};for(let n=0;n<t.length;n++){let l=h[h.length-1],S=null;h.length>=2&&(S=h[h.length-2]);let C=t[n],E=t.substring(n);switch(l){case"OUT":if(s.utility.isWhitespace(C))continue;if(E.startsWith("/*")){n++,f="",h.push(r);continue}if(E.startsWith("//")){n++,f="",h.push(c);continue}d=C,h.push(m);break;case c:"\n"==C&&(h.pop(),e.child.push({text:f,elementType:i.IScssElementType.oneLineComment}),f=""),f+=C;break;case r:E.startsWith("*/")?(n++,h.pop(),e.child.push({text:f,elementType:i.IScssElementType.multiLineComment}),f=""):f+=C;break;case m:":"==C?(y=d,g="",h.pop(),h.push(u)):E.startsWith("#{")?(d+="#{",n++):"{"==C?(T.name=d,T.content="",T.child=[],d="",h.pop(),h.push(o)):";"==C?(e.child.push({name:d,elementType:i.IScssElementType.rule}),h.pop(),d=""):d+=C;break;case o:"{"==C?(h.push(p),T.content+=C):"}"==C?(h.pop(),e.child.push(JSON.parse(JSON.stringify(T)))):E.startsWith("/*")?(h.push(a),T.content+="/*",n++):(s.utility.isWhitespace(C),T.content+=C);break;case a:E.startsWith("*/")?(T.content+="*/",n++,h.pop()):T.content+=C;break;case p:T.content+=C,"{"==C?h.push(p):"}"==C&&h.pop();break;case u:";"==C?(e.child.push({name:y,value:g,elementType:i.IScssElementType.rule}),h.pop(),y="",g=""):E.startsWith("#{")?(g+="#{",n++):"{"==C?(T.name=y+":"+g,T.content="",T.child=[],d="",y="",g="",h.pop(),h.push(o)):E.trim().length<=0?(e.child.push({name:y,value:g,elementType:i.IScssElementType.rule}),h.pop(),y="",g=""):g+=C;break;default:console.log(`State not implemented: ${l}`)}}delete e.content,l.debug.SaveObjectAsJsonFile(`unpackContentFromIScss.${n}`,h)};let c=[t];for(;c.length>0;){let e=c.pop();o(e),null!=e.child&&null!=e.child&&e.child.forEach((e=>c.push(e))),l.debug.SaveObjectAsJsonFile(`scssConvertToObject.${n}`,t),n++}return t}static objectConvertToScss(e){let t=JSON.parse(JSON.stringify(e));if(null==t.child||null==t.child)return"";if(t.child.length<=0)return"";const n=function(e,t){let n=[e],l=0;for(;n.length>0;){let e=n.pop();if(null!=e.child&&null!=e.child){for(let n=e.child.length-1;n>=0;n--){let i=t(e,e.child[n]);!0===i||(!1===i?(l++,e.child.splice(n,1)):(l++,e.child.splice(n,1,i)))}for(let t of e.child)n.push(t)}}return l},l=function(e,t){switch(t.elementType){case i.IScssElementType.rule:{let e=t.name;return null==t.value&&null==t.value||(e+=":"+t.value),e+=";",{code:[e],elementType:i.IScssElementType.code}}case i.IScssElementType.oneLineComment:return{code:["// "+t.text],elementType:i.IScssElementType.code};case i.IScssElementType.multiLineComment:return{code:["/* "+t.text+" */"],elementType:i.IScssElementType.code};case i.IScssElementType.block:{let e=t.child;if(null==e||null==e)return{code:[t.name+"{}"],elementType:i.IScssElementType.code};if(e.length<=0)return{code:[t.name+"{}"],elementType:i.IScssElementType.code};if(1==e.length){let n=[];return n.push(t.name+"{"),e[0].elementType!=i.IScssElementType.code||(e[0].code.forEach((e=>n.push(`\t${e}`))),n.push("}"),{code:[...n],elementType:i.IScssElementType.code})}}}return!0},s=function(e,t){if(null!=e.child&&null!=e.child){if(e.child.length<=1)return!0;let t=[],n=!0;if(e.child.forEach((e=>{e.elementType==i.IScssElementType.code?t.push(...e.code):n=!1})),n)return e.child=[{code:t,elementType:i.IScssElementType.code}],!0}return!0};let o=1;for(;o>0;)o=0,o+=n(t,l),o+=n(t,s);return Object.keys(t).includes("code")?t.code.join("\n"):1==t.child.length&&t.child[0].elementType==i.IScssElementType.code?t.child[0].code.join("\n"):JSON.stringify(t,null,2)}}t.Functions=o},613:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.logger=void 0,t.logger=new class{constructor(){this.data=[]}log(e){this.data.push({msg:e})}printLogs(){this.data.forEach((e=>{console.log(e.msg)}))}flush(){this.data=[]}printLogsAndFlush(){this.printLogs(),this.flush()}}},152:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.utility=void 0;const l=n(896),i=n(928);t.utility={getFilesSync:function(e){try{return(0,l.readdirSync)(e).filter((t=>{const n=(0,i.join)(e,t);return(0,l.statSync)(n).isFile()}))}catch(e){return console.error("Error reading files:",e),[]}},getDirectoriesSync:function(e){try{return(0,l.readdirSync)(e).filter((t=>{const n=(0,i.join)(e,t);return(0,l.statSync)(n).isDirectory()}))}catch(e){return console.error("Error reading directories:",e),[]}},loadFileText:function(e){try{const t=(0,i.join)(process.cwd(),e);return(0,l.readFileSync)(t,"utf-8")}catch(e){return console.error("Error loading file:",e),""}},doesFileExist:function(e){const t=(0,i.join)(process.cwd(),e);return(0,l.existsSync)(t)},saveObjectAsJson:function(e,t){try{const n=(0,i.join)(process.cwd(),e),s=JSON.stringify(t,null,2);(0,l.writeFileSync)(n,s,"utf-8")}catch(e){console.error("Błąd podczas zapisywania pliku JSON:",e)}},saveString:function(e,t){try{const n=(0,i.join)(process.cwd(),e);(0,l.writeFileSync)(n,t,"utf-8")}catch(e){console.error("Błąd podczas zapisywania pliku:",e)}},isWhitespace:function(e){return/^\s$/.test(e)},createDirectoriesSync:function(e){let t=e.split("/"),n="";t.forEach((e=>{n=(0,i.join)(n,e),(0,l.existsSync)(n)||(0,l.mkdirSync)(n)}))},getDirectoryPath:function(e){const t=e.split(/[/\\]/);return t.pop(),t.join("/")},changeExtension:function(e,t){let n=e.split(".");return n.length>1&&(n[n.length-1]=t),n.join(".")},getExtension:function(e){let t=e.split(".");return t.length>1?t.pop():""},deleteDirectorySync:function(e){try{(0,l.rmSync)(e,{recursive:!0,force:!0}),console.log(`Katalog '${e}' został usunięty.`)}catch(e){console.error(`Nie udało się usunąć katalogu: ${e}`)}},deleteFileSync:function(e,t=!1){try{(0,l.rmSync)(e,{force:!0}),t||console.log(`Plik '${e}' został usunięty.`)}catch(e){console.error(`Nie udało się usunąć pliku: ${e}`)}}}},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={};function n(l){var i=t[l];if(void 0!==i)return i.exports;var s=t[l]={exports:{}};return e[l](s,s.exports,n),s.exports}(()=>{const e=n(152),t=n(928),l=n(168),i=n(613),s=n(884);function o(t,n,o){if(i.logger.flush(),i.logger.log(`Process file: ${t} -> ${n}`),!e.utility.doesFileExist(t))return i.logger.log(`In file ${t} does't exist`),void i.logger.printLogsAndFlush();let c=e.utility.loadFileText(t);e.utility.createDirectoriesSync(e.utility.getDirectoryPath(n));let r=l.Functions.scssConvertToObject(c),u=l.Functions.objectConvertToScss(r),m=l.Functions.compareScssStrings(c,u);if(m||(m=l.Functions.probablySameScssStrings(c,u)),i.logger.log("Is properly packed and unpacked scss: "+m),0==m){let t=e.utility.changeExtension(n,"fail.json");e.utility.saveObjectAsJson(t,r),i.logger.printLogsAndFlush(),e.utility.saveString(e.utility.changeExtension(n,"fail."+e.utility.getExtension(n)),u)}for(let e of o)(0,s.runCommand)(r,e);e.utility.changeExtension(n,".json");let p=l.Functions.objectConvertToScss(r);p.trim().length>0&&e.utility.saveString(n,p)}let c=null,r="scss_modder.json";if(e.utility.doesFileExist(r)||(console.log("Brak pliku scss_modder.json"),process.exit()),c=JSON.parse(e.utility.loadFileText(r)),Object.keys(c).includes("startDir")){let n=c;e.utility.doesFileExist(n.outputDir)&&e.utility.deleteDirectorySync(n.outputDir),n.startDir.endsWith("/")&&(n.startDir=n.startDir.substring(0,n.startDir.length-1));let l=["."];for(console.log(c);l.length>0;){let i=l.pop(),s=(0,t.join)(process.cwd(),n.startDir,i),c=e.utility.getFilesSync(s).filter((e=>e.endsWith(".css")||e.endsWith(".scss")));for(let e of c){let l=`${(0,t.join)(n.startDir,i,e)}`;l.startsWith(n.outputDir)||null!=n.excludePathFilesRegex&&null!=n.excludePathFilesRegex&&null!=l.match(new RegExp(n.excludePathFilesRegex))||o((0,t.join)(n.startDir,i,e),(0,t.join)(n.outputDir,i,e),n.commands)}let r=e.utility.getDirectoriesSync(s);for(let e of r)l.push((0,t.join)(i,e))}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,