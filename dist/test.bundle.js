(()=>{"use strict";var e={169:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IScssElementType=void 0,t.IScssElementType={default:"Default",rule:"Rule",block:"Block",oneLineComment:"OneLineComment",multiLineComment:"MultiLineComment",code:"Code"}},22:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debug=t.Debug=void 0;const s=n(928),l=n(152);class i{constructor(){this._debugOutputDir=process.cwd(),this._debugEnabled=!1}set DebugOutputDir(e){this._debugOutputDir=e,this.CleanDebugDir()}get DebugOutputDir(){return this._debugOutputDir}DebugEnable(){this._debugEnabled=!0}CleanDebugDir(){l.utility.getFilesSync(this.DebugOutputDir).forEach((e=>{e.endsWith(".debug.json")&&l.utility.deleteFileSync((0,s.join)(this.DebugOutputDir,e),!0)}))}GetDebugOutPath(e){return(0,s.join)(this.DebugOutputDir,e)}SaveObjectAsJsonFile(e,t){this._debugEnabled&&l.utility.saveObjectAsJson(this.GetDebugOutPath(e+".debug.json"),t)}}t.Debug=i,t.debug=new i},168:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Functions=void 0;const s=n(22),l=n(169),i=n(152);class o{static findDifference(e,t){const n=Math.max(e.length,t.length),s=new Map;for(let l=0;l<n;l++){let n=" ",i=" ";l<e.length&&(n=e[l]),l<t.length&&(i=t[l]);let o=`${n}${i}`;if(n!=i){let e=s.get(o);null==e||null==e?e=1:e++,s.set(o,e)}}return s}static countCharacters(e,t){let n=0;for(let s of t)s==e&&n++;return n}static countCharactersMap(e,t){let n=new Map;for(let t of e)n.set(t,0);for(let s of t)if(e.includes(s)){let e=1+n.get(s);n.set(s,e)}return n}static compareScssFiles(e,t){let n=i.utility.loadFileText(e),s=i.utility.loadFileText(t);return o.compareScssStrings(n,s)}static probablySameScssStrings(e,t){const n=function(e){return e.split("\n").filter((e=>!e.trimStart().startsWith("//"))).join("\n").replace(/\s+/g,"")};let s=n(e),l=n(t),i=(s.length,l.length,["{","}",";"]),c=o.countCharactersMap(i,s),r=o.countCharactersMap(i,l),u=new Map,a=!1;for(let e of i){let t=c.get(e)-r.get(e);0!=t&&u.set(e,t)}if(u.size<=0)a=!0;else if(1==u.size){let e=[...u.keys()][0];";"==e?a=this.compareScssStrings(s.replace(/;/g,""),l.replace(/;/g,"")):(this.findDifference(s,l),console.log({sumKey:e,sumKeyCount:u.get(e)}))}else this.findDifference(s,l),console.log(u);return a}static compareScssStrings(e,t){return e.replace(/\s+/g,"")==t.replace(/\s+/g,"")}static scssConvertToObject(e){let t={content:e,child:[],elementType:l.IScssElementType.default},n=0;const o=function(e){if(null==e.content||null==e.content)return;e.child=[];let t=e.content;const o="IN_BLOCK",c="IN_ONELINECOMMENT",r="IN_MULTILINECOMMENT",u="IN_RULE",a="IN_NAME_RULE_OR_BLOCK",p="IN_INTERNAL_BLOCK",d="IN_INTERNAL_BLOCK_MULTILINECOMMENT";let h=[];h.push("OUT");let g="",y="",f="",m="",S={name:"",child:[],elementType:l.IScssElementType.block};for(let n=0;n<t.length;n++){let s=h[h.length-1],b=null;h.length>=2&&(b=h[h.length-2]);let T=t[n],E=t.substring(n);switch(s){case"OUT":if(i.utility.isWhitespace(T))continue;if(E.startsWith("/*")){n++,m="",h.push(r);continue}if(E.startsWith("//")){n++,m="",h.push(c);continue}g=T,h.push(a);break;case c:"\n"==T&&(h.pop(),e.child.push({text:m,elementType:l.IScssElementType.oneLineComment}),m=""),m+=T;break;case r:E.startsWith("*/")?(n++,h.pop(),e.child.push({text:m,elementType:l.IScssElementType.multiLineComment}),m=""):m+=T;break;case a:":"==T?(y=g,f="",h.pop(),h.push(u)):E.startsWith("#{")?(g+="#{",n++):"{"==T?(S.name=g,S.content="",S.child=[],g="",h.pop(),h.push(o)):";"==T?(e.child.push({name:g,elementType:l.IScssElementType.rule}),h.pop(),g=""):g+=T;break;case o:"{"==T?(h.push(p),S.content+=T):"}"==T?(h.pop(),e.child.push(JSON.parse(JSON.stringify(S)))):E.startsWith("/*")?(h.push(d),S.content+="/*",n++):(i.utility.isWhitespace(T),S.content+=T);break;case d:E.startsWith("*/")?(S.content+="*/",n++,h.pop()):S.content+=T;break;case p:S.content+=T,"{"==T?h.push(p):"}"==T&&h.pop();break;case u:";"==T?(e.child.push({name:y,value:f,elementType:l.IScssElementType.rule}),h.pop(),y="",f=""):E.startsWith("#{")?(f+="#{",n++):"{"==T?(S.name=y+":"+f,S.content="",S.child=[],g="",y="",f="",h.pop(),h.push(o)):E.trim().length<=0?(e.child.push({name:y,value:f,elementType:l.IScssElementType.rule}),h.pop(),y="",f=""):f+=T;break;default:console.log(`State not implemented: ${s}`)}}delete e.content,s.debug.SaveObjectAsJsonFile(`unpackContentFromIScss.${n}`,h)};let c=[t];for(;c.length>0;){let e=c.pop();o(e),null!=e.child&&null!=e.child&&e.child.forEach((e=>c.push(e))),s.debug.SaveObjectAsJsonFile(`scssConvertToObject.${n}`,t),n++}return t}static objectConvertToScss(e){let t=JSON.parse(JSON.stringify(e));if(null==t.child||null==t.child)return"";if(t.child.length<=0)return"";const n=function(e,t){let n=[e],s=0;for(;n.length>0;){let e=n.pop();if(null!=e.child&&null!=e.child){for(let n=e.child.length-1;n>=0;n--){let l=t(e,e.child[n]);!0===l||(!1===l?(s++,e.child.splice(n,1)):(s++,e.child.splice(n,1,l)))}for(let t of e.child)n.push(t)}}return s},s=function(e,t){switch(t.elementType){case l.IScssElementType.rule:{let e=t.name;return null==t.value&&null==t.value||(e+=":"+t.value),e+=";",{code:[e],elementType:l.IScssElementType.code}}case l.IScssElementType.oneLineComment:return{code:["// "+t.text],elementType:l.IScssElementType.code};case l.IScssElementType.multiLineComment:return{code:["/* "+t.text+" */"],elementType:l.IScssElementType.code};case l.IScssElementType.block:{let e=t.child;if(null==e||null==e)return{code:[t.name+"{}"],elementType:l.IScssElementType.code};if(e.length<=0)return{code:[t.name+"{}"],elementType:l.IScssElementType.code};if(1==e.length){let n=[];return n.push(t.name+"{"),e[0].elementType!=l.IScssElementType.code||(e[0].code.forEach((e=>n.push(`\t${e}`))),n.push("}"),{code:[...n],elementType:l.IScssElementType.code})}}}return!0},i=function(e,t){if(null!=e.child&&null!=e.child){if(e.child.length<=1)return!0;let t=[],n=!0;if(e.child.forEach((e=>{e.elementType==l.IScssElementType.code?t.push(...e.code):n=!1})),n)return e.child=[{code:t,elementType:l.IScssElementType.code}],!0}return!0};let o=1;for(;o>0;)o=0,o+=n(t,s),o+=n(t,i);return Object.keys(t).includes("code")?t.code.join("\n"):1==t.child.length&&t.child[0].elementType==l.IScssElementType.code?t.child[0].code.join("\n"):JSON.stringify(t,null,2)}}t.Functions=o},613:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.logger=void 0,t.logger=new class{constructor(){this.data=[]}log(e){this.data.push({msg:e})}printLogs(){this.data.forEach((e=>{console.log(e.msg)}))}flush(){this.data=[]}printLogsAndFlush(){this.printLogs(),this.flush()}}},152:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.utility=void 0;const s=n(896),l=n(928);t.utility={getFilesSync:function(e){try{return(0,s.readdirSync)(e).filter((t=>{const n=(0,l.join)(e,t);return(0,s.statSync)(n).isFile()}))}catch(e){return console.error("Error reading files:",e),[]}},getDirectoriesSync:function(e){try{return(0,s.readdirSync)(e).filter((t=>{const n=(0,l.join)(e,t);return(0,s.statSync)(n).isDirectory()}))}catch(e){return console.error("Error reading directories:",e),[]}},loadFileText:function(e){try{const t=(0,l.join)(process.cwd(),e);return(0,s.readFileSync)(t,"utf-8")}catch(e){return console.error("Error loading file:",e),""}},doesFileExist:function(e){const t=(0,l.join)(process.cwd(),e);return(0,s.existsSync)(t)},saveObjectAsJson:function(e,t){try{const n=(0,l.join)(process.cwd(),e),i=JSON.stringify(t,null,2);(0,s.writeFileSync)(n,i,"utf-8")}catch(e){console.error("Błąd podczas zapisywania pliku JSON:",e)}},saveString:function(e,t){try{const n=(0,l.join)(process.cwd(),e);(0,s.writeFileSync)(n,t,"utf-8")}catch(e){console.error("Błąd podczas zapisywania pliku:",e)}},isWhitespace:function(e){return/^\s$/.test(e)},createDirectoriesSync:function(e){let t=e.split("/"),n="";t.forEach((e=>{n=(0,l.join)(n,e),(0,s.existsSync)(n)||(0,s.mkdirSync)(n)}))},getDirectoryPath:function(e){const t=e.split(/[/\\]/);return t.pop(),t.join("/")},changeExtension:function(e,t){let n=e.split(".");return n.length>1&&(n[n.length-1]=t),n.join(".")},getExtension:function(e){let t=e.split(".");return t.length>1?t.pop():""},deleteDirectorySync:function(e){try{(0,s.rmSync)(e,{recursive:!0,force:!0}),console.log(`Katalog '${e}' został usunięty.`)}catch(e){console.error(`Nie udało się usunąć katalogu: ${e}`)}},deleteFileSync:function(e,t=!1){try{(0,s.rmSync)(e,{force:!0}),t||console.log(`Plik '${e}' został usunięty.`)}catch(e){console.error(`Nie udało się usunąć pliku: ${e}`)}}}},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={};function n(s){var l=t[s];if(void 0!==l)return l.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,n),i.exports}(()=>{const e=n(22),t=n(168),s=n(613),l=n(152);let i="./tests";l.utility.getDirectoriesSync(i).map((e=>`${i}/${e}`)).forEach(((n,i)=>{if(e.debug.DebugOutputDir=n,e.debug.DebugEnable(),s.logger.log("Run tests for dir: "+n),l.utility.doesFileExist(`${n}/disabled.txt`))return void s.logger.log("Skip test because is disabled");let o=`${n}/in.scss`;if(l.utility.doesFileExist(o)||(s.logger.log(`File ${o} not exist check another`),o=`${n}/in.css`),!l.utility.doesFileExist(o))return s.logger.log(`File ${o} not exist`),void s.logger.log(`Skip: ${n}`);s.logger.log(`Process file: ${o}`);let c=l.utility.loadFileText(o),r=t.Functions.scssConvertToObject(c),u=`${n}/out.json`;l.utility.saveObjectAsJson(u,r);let a=`${n}/out.scss`,p=t.Functions.objectConvertToScss(r);l.utility.saveString(a,p);let d=t.Functions.compareScssFiles(o,a);s.logger.log("out and in is same: "+(d?"true":"false"));let h=t.Functions.probablySameScssStrings(o,a);s.logger.log("probably out and in is same: "+(h?"true":"false")),d||h?s.logger.flush():s.logger.printLogsAndFlush()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,